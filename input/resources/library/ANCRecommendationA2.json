{
  "resourceType": "Library",
  "id": "ANCRecommendationA2",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.6.0"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": false
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "None"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://somewhere.org/fhir/uv/contentig/Library/ANCRecommendationA2",
  "version": "0.1.0",
  "name": "ANCRecommendationA2",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://somewhere.org/fhir/uv/contentig/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Value set Haemoglobin Tests",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/haemoglobin-tests"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Expected Delivery Date Method - IPS",
    "resource": "http://hl7.org/fhir/uv/ips/ValueSet/edd-method-uv-ips"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Estimated Due Date",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "dateTime"
  }, {
    "name": "Gestational Age in Weeks",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Hb Concentration",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Has Anaemia",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Pregnancy Status",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "CodeableConcept"
  }, {
    "name": "Pregnant",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Is Recommendation Applicable",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Get Card Summary",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Card Detail",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Card Indicator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status", "issued" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://hl7.org/fhir/uv/ips/ValueSet/edd-method-uv-ips"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/haemoglobin-tests"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://loinc.org",
        "code": "82810-3",
        "display": "Pregnancy status"
      } ]
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBTkNSZWNvbW1lbmRhdGlvbkEyIHZlcnNpb24gJzAuMS4wJwoKLyoKSUFGIC0gSXJvbiBhbmQgRm9saWMgQWNpZCBTdXBwbGVtZW50cwoKUkVDT01NRU5EQVRJT04gQS4yLjE6IERhaWx5IG9yYWwgaXJvbiBhbmQgZm9saWMgYWNpZCBzdXBwbGVtZW50YXRpb24gd2l0aCAzMCBtZyB0bwo2MCBtZyBvZiBlbGVtZW50YWwgaXJvbiBhbmQgNDAwICZtdTtnICgwLjQgbWcpIGZvbGljIGFjaWQgaXMgcmVjb21tZW5kZWQgZm9yIHByZWduYW50CndvbWVuIHRvIHByZXZlbnQgbWF0ZXJuYWwgYW5hZW1pYSwgcHVlcnBlcmFsIHNlcHNpcywgbG93IGJpcnRoIHdlaWdodCwgYW5kIHByZXRlcm0gYmlydGguCihSZWNvbW1lbmRlZCkKKi8KCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJyBjYWxsZWQgRkhJUkhlbHBlcnMKCmNvZGVzeXN0ZW0gTE9JTkM6ICdodHRwOi8vbG9pbmMub3JnJwoKdmFsdWVzZXQgIkhhZW1vZ2xvYmluIFRlc3RzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL2FuYy1jZHMvVmFsdWVTZXQvaGFlbW9nbG9iaW4tdGVzdHMnCnZhbHVlc2V0ICJQcmVnbmFuY3kgRXhwZWN0ZWQgRGVsaXZlcnkgRGF0ZSBNZXRob2QgLSBJUFMiOiAnaHR0cDovL2hsNy5vcmcvZmhpci91di9pcHMvVmFsdWVTZXQvZWRkLW1ldGhvZC11di1pcHMnCgpjb2RlICJQcmVnbmFuY3kgc3RhdHVzIjogJzgyODEwLTMnIGZyb20gTE9JTkMgZGlzcGxheSAnUHJlZ25hbmN5IHN0YXR1cycKY29kZSAiUHJlZ25hbmN5IHN0YXR1cyAtIFByZWduYW50IjogJ0xBMTUxNzMtMCcgZnJvbSBMT0lOQyBkaXNwbGF5ICdQcmVnbmFudCcKY29kZSAiRGVsaXZlcnkgZGF0ZSBFc3RpbWF0ZWQgZnJvbSBsYXN0IG1lbnN0cnVhbCBwZXJpb2QiOiAnMTE3NzktNicgZnJvbSBMT0lOQyBkaXNwbGF5ICdEZWxpdmVyeSBkYXRlIEVzdGltYXRlZCBmcm9tIGxhc3QgbWVuc3RydWFsIHBlcmlvZCcKCmNvbnRleHQgUGF0aWVudAoKLyoKT24gZXZlcnkgY29udGFjdCwKICBpZiBhbmFlbWlhIGRldGVjdGVkCiAgICByZWNvbW1lbmQgMTIwIG1nIG9mIGVsZW1lbnRhbCBpcm9uIGFuZCA0MDAgJm11O2cgb2YgZm9saWMgYWNpZCBkYWlseSAoUmVjb21tZW5kYXRpb24gQS4yLjEpCiAgZWxzZQogICAgcmVjb21tZW5kIDMwIHRvIDYwIG1nIG9mIGVsZW1lbnRhbCBpcm9uIGFuZCA0MDAgJm11O2cgb2YgZm9saWMgYWNpZCwgZGFpbHkgKFJlY29tbWVuZGF0aW9uIEEuMi4xKQoKSGFzIEFuYWVtaWEKICBIYiBDb25jZW50cmF0aW9uIDwgMTEgZy9kTCBhbmQgR2VzdGF0aW9uYWwgQWdlIDwgMTIgd2Vla3Mgb3IgR2VzdGF0aW9uYWwgQWdlID4gMjggd2Vla3MKICBIYiBDb25jZW50cmF0aW9uIDwgMTAuNSBnL2RMIGFuZCBHZXN0YXRpb25hbCBBZ2UgYmV0d2VlbiAxMyB3ZWVrcyBhbmQgMjcgd2Vla3MKKi8KCmRlZmluZSAiSGFzIEFuYWVtaWEiOgogIGlmICJHZXN0YXRpb25hbCBBZ2UgaW4gV2Vla3MiIGJldHdlZW4gMTMgYW5kIDI3IHRoZW4KICAgICJIYiBDb25jZW50cmF0aW9uIiA8IDEwLjUgJ2cvZEwnCiAgZWxzZQogICAgIkhiIENvbmNlbnRyYXRpb24iIDwgMTEgJ2cvZEwnCgpkZWZpbmUgIlByZWduYW50IjoKICAgICJQcmVnbmFuY3kgU3RhdHVzIiB+ICJQcmVnbmFuY3kgc3RhdHVzIC0gUHJlZ25hbnQiCgpkZWZpbmUgIlByZWduYW5jeSBTdGF0dXMiOgogIEZISVJIZWxwZXJzLlRvQ29uY2VwdCgKICAgIEZpcnN0KAogICAgICBbT2JzZXJ2YXRpb246ICJQcmVnbmFuY3kgc3RhdHVzIl0gTwogICAgICAgIHdoZXJlIE8uc3RhdHVzID0gJ2ZpbmFsJwogICAgICAgIHNvcnQgYnkgRkhJUkhlbHBlcnMuVG9EYXRlVGltZShlZmZlY3RpdmUgYXMgRkhJUi5kYXRlVGltZSkKICAgICkudmFsdWUKICApCgpkZWZpbmUgIkVzdGltYXRlZCBEdWUgRGF0ZSI6CiAgRkhJUkhlbHBlcnMuVG9EYXRlVGltZSgKICAgIEZpcnN0KAogICAgICBbT2JzZXJ2YXRpb246ICJQcmVnbmFuY3kgRXhwZWN0ZWQgRGVsaXZlcnkgRGF0ZSBNZXRob2QgLSBJUFMiXSBPCiAgICAgICAgd2hlcmUgTy5zdGF0dXMgPSAnZmluYWwnCiAgICAgICAgICBhbmQgRkhJUkhlbHBlcnMuVG9EYXRlVGltZShPLmlzc3VlZCkgMSB5ZWFyIG9yIGxlc3MgYmVmb3JlIFRvZGF5KCkKICAgICAgICBzb3J0IGJ5IEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoZWZmZWN0aXZlIGFzIEZISVIuZGF0ZVRpbWUpIGRlc2MKICAgICkudmFsdWUKICApCgpkZWZpbmUgIkdlc3RhdGlvbmFsIEFnZSBpbiBXZWVrcyI6CiAgd2Vla3MgYmV0d2VlbiAoIkVzdGltYXRlZCBEdWUgRGF0ZSIgLSA5IG1vbnRocyAtIDcgZGF5cykgYW5kIFRvZGF5KCkKCmRlZmluZSAiSGIgQ29uY2VudHJhdGlvbiI6CiAgRkhJUkhlbHBlcnMuVG9RdWFudGl0eSgKICAgIEZpcnN0KAogICAgICBbIk9ic2VydmF0aW9uIjogIkhhZW1vZ2xvYmluIFRlc3RzIl0gTwogIAkJICB3aGVyZSBPLnN0YXR1cyA9ICdmaW5hbCcKICAgICAgICBzb3J0IGJ5IEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoZWZmZWN0aXZlIGFzIEZISVIuZGF0ZVRpbWUpIGRlc2NlbmRpbmcKICAgICkudmFsdWUKICApCgpkZWZpbmUgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGUiOgogICJQcmVnbmFudCIKCmRlZmluZSAiR2V0IENhcmQgU3VtbWFyeSI6CiAgaWYgIkhhcyBBbmFlbWlhIiB0aGVuCiAgICAnUmVjb21tZW5kIDEyMCBtZyBlbGVtZW50YWwgaXJvbiBhbmQgMC40IG1nIGZvbGljIGFjaWQsIGRhaWx5JwogIGVsc2UKICAgICdSZWNvbW1lbmQgMzAtNjAgbWcgZWxlbWVudGFsIGlyb24gYW5kIDAuNCBtZyBmb2xpYyBhY2lkLCBkYWlseScKCmRlZmluZSAiR2V0IENhcmQgRGV0YWlsIjoKICBpZiAiSGFzIEFuYWVtaWEiIHRoZW4KICAgICdEYWlseSBlbGVtZW50YWwgaXJvbiBzaG91bGQgYmUgaW5jcmVhc2VkIHRvIDEyMCBtZywgYW5kIGRhaWx5IGRvc2Ugb2YgNDAwIHVnICgwLjQgbWcpIHVudGlsIGhlciBIYiBjb25jZW50cmF0aW9uIHJpc2VzIHRvIG5vcm1hbCcKICBlbHNlCiAgICAnRGFpbHkgZWxlbWVudGFsIGlyb24gb2YgYmV0d2VlbiAzMG0gYW5kIDYwbWcsIGFuZCBkYWlseSBkb3NlIG9mIDQwMCB1ZyAoMC40IG1nKSBvZiBmb2xpYyBhY2lkIGlzIHJlY29tbWVuZGVkIGZvciBwcmVnbmFudCB3b21lbicKCmRlZmluZSAiR2V0IENhcmQgSW5kaWNhdG9yIjoKICBpZiAiSGFzIEFuYWVtaWEiIHRoZW4KICAgICd3YXJuaW5nJwogIGVsc2UKICAgICdpbmZvJwo="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}